
@{
    ViewData["Title"] = "Video Call";
}

<h2>Video Call</h2>

<select id="userList"></select>
<button id="callButton">Call</button>
<br /><br />
<video id="localVideo" autoplay playsinline muted></video>
<video id="remoteVideo" autoplay playsinline></video>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<script src="https://webrtc.github.io/adapter/adapter-latest.js"></script>

<script>
    const connection = new signalR.HubConnectionBuilder().withUrl("/videoCallHub").build();

    let localStream;
    let peerConnection;
    let targetConnectionId = '';
    let userList = [];

    const configuration = { iceServers: [{ urls: 'stun:stun.l.google.com:19302' }] };

    connection.start().then(startLocalStream);

    connection.on("UserConnected", function (connectionId) {
        if (!userList.includes(connectionId) && connectionId !== connection.connectionId) {
            userList.push(connectionId);
            updateUserList();
        }
    });

    connection.on("UserDisconnected", function (connectionId) {
        userList = userList.filter(x => x !== connectionId);
        updateUserList();
    });

    connection.on("ReceiveOffer", async (fromConnectionId, offer) => {
        targetConnectionId = fromConnectionId;
        await startLocalStream();
        createPeerConnection();

        await peerConnection.setRemoteDescription(new RTCSessionDescription(JSON.parse(offer)));
        const answer = await peerConnection.createAnswer();
        await peerConnection.setLocalDescription(answer);

        connection.invoke("SendAnswer", targetConnectionId, JSON.stringify(answer));
    });

    connection.on("ReceiveAnswer", async (fromConnectionId, answer) => {
        await peerConnection.setRemoteDescription(new RTCSessionDescription(JSON.parse(answer)));
    });

    connection.on("ReceiveIceCandidate", async (fromConnectionId, candidate) => {
        if (peerConnection) {
            await peerConnection.addIceCandidate(new RTCIceCandidate(JSON.parse(candidate)));
        }
    });

    document.getElementById("callButton").addEventListener("click", async () => {
        targetConnectionId = document.getElementById("userList").value;
        createPeerConnection();

        const offer = await peerConnection.createOffer();
        await peerConnection.setLocalDescription(offer);

        connection.invoke("SendOffer", targetConnectionId, JSON.stringify(offer));
    });

    async function startLocalStream() {
        localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
        document.getElementById('localVideo').srcObject = localStream;
    }

    function createPeerConnection() {
        peerConnection = new RTCPeerConnection(configuration);

        localStream.getTracks().forEach(track => peerConnection.addTrack(track, localStream));

        peerConnection.ontrack = event => {
            document.getElementById('remoteVideo').srcObject = event.streams[0];
        };

        peerConnection.onicecandidate = event => {
            if (event.candidate) {
                connection.invoke("SendIceCandidate", targetConnectionId, JSON.stringify(event.candidate));
            }
        };
    }

    function updateUserList() {
        const userListElement = document.getElementById("userList");
        userListElement.innerHTML = '';
        userList.forEach(id => {
            const option = document.createElement("option");
            option.value = id;
            option.text = id;
            userListElement.appendChild(option);
        });
    }
</script>
