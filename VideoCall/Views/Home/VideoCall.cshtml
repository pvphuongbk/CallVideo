@using VideoCall.DataAccess.Entities
@model UserCall

<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8" />
    <title>Video Call with SignalR + WebRTC (Fixed)</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <style>
        body {
            font-family: system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif;
        }

        h2 {
            margin: 6px 0;
        }

        video {
            width: 45%;
            margin: 5px;
            border: 2px solid #444;
            border-radius: 8px;
            background: #000;
        }

        .toolbar {
            margin: 8px 0;
            display: flex;
            gap: 8px;
            align-items: center;
        }

        button {
            padding: 8px 12px;
            border: 0;
            border-radius: 6px;
            cursor: pointer;
        }

        .btn-end {
            background: #e53935;
            color: #fff;
            display: none;
        }

        .btn-mic, .btn-cam {
            background: #374151;
            color: #fff;
        }

        .status {
            font-size: 12px;
            color: #555;
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 9999;
            inset: 0;
            background-color: rgba(0,0,0,0.5);
        }

        .modal-content {
            background: white;
            padding: 20px;
            border-radius: 8px;
            width: 320px;
            margin: 12% auto;
            text-align: center;
        }

        .modal-actions button {
            margin: 5px;
            padding: 8px 16px;
            border: none;
            cursor: pointer;
            border-radius: 6px;
        }

        .btn-accept {
            background: #4CAF50;
            color: white;
        }

        .btn-reject {
            background: #f44336;
            color: white;
        }

        ul {
            padding-left: 18px;
        }

        li {
            margin: 4px 0;
        }
    </style>
</head>
<body>
    <h2>Video Call</h2>
    <h3>@Model.Fullname</h3>

    <div>
        <video id="localVideo" autoplay muted playsinline></video>
        <video id="remoteVideo" autoplay playsinline></video>
    </div>

    <div class="toolbar">
        <button id="btnToggleMic" class="btn-mic">Tắt mic</button>
        <button id="btnToggleCam" class="btn-cam">Tắt camera</button>
        <button id="btnEndCall" class="btn-end">Kết thúc cuộc gọi</button>
        <span class="status" id="connStatus"></span>
    </div>

    <h3>Danh sách người dùng</h3>
    <ul id="userList"></ul>

    <div id="callModal" class="modal">
        <div class="modal-content">
            <h3 id="callTitle"></h3>
            <div class="modal-actions">
                <button id="acceptCallBtn" class="btn-accept">Chấp nhận</button>
                <button id="rejectCallBtn" class="btn-reject">Hủy</button>
            </div>
        </div>
    </div>

    <script>
        // ===== Global state =====
        let connection;          // SignalR
        let myId = null;
        let peerConnection = null; // RTCPeerConnection
        let localStream = null;
        let remoteStream = null;
        let pendingCandidates = []; // ICE candidates tạm giữ nếu chưa setRemoteDescription
        let micEnabled = true, camEnabled = true;

        // ===== TURN/STUN config =====
        const config = {
            // Để test ép dùng TURN, bật dòng dưới:
            // iceTransportPolicy: "relay",
            iceServers: [
                { urls: "stun:stun.l.google.com:19302" },
                {
                    urls: [
                        "stun:210.245.84.117:3478",
                        "turn:210.245.84.117:3478?transport=udp",
                        "turn:210.245.84.117:3478?transport=tcp"
                    ],
                    username: "turnuser",
                    credential: "12345678"
                }
            ]
        };

        const $ = (id) => document.getElementById(id);

        // ===== Helper UI =====
        function setStatus(text) { $("connStatus").textContent = text; }
        function openModal(title) { $("callTitle").textContent = title; $("callModal").style.display = "block"; }
        function closeModal() { $("callModal").style.display = "none"; }

        // ===== Media helpers =====
        async function ensureLocalMedia() {
            if (localStream) return localStream;
            const devices = await navigator.mediaDevices.enumerateDevices();
            const hasVideo = devices.some(d => d.kind === 'videoinput');
            const hasAudio = devices.some(d => d.kind === 'audioinput');
            if (!hasAudio && !hasVideo) throw new Error("Không tìm thấy camera và micro");
            localStream = await navigator.mediaDevices.getUserMedia({ video: hasVideo, audio: hasAudio });
            $("localVideo").srcObject = localStream;
            return localStream;
        }

        function attachLocalTracks(pc) {
            if (!localStream) return;
            localStream.getTracks().forEach(t => pc.addTrack(t, localStream));
        }

        function cleanup() {
            try { if (peerConnection) peerConnection.close(); } catch { }
            peerConnection = null;
            if (localStream) { localStream.getTracks().forEach(t => t.stop()); }
            localStream = null;
            if (remoteStream) { remoteStream.getTracks().forEach(t => t.stop()); }
            remoteStream = null;
            $("localVideo").srcObject = null;
            $("remoteVideo").srcObject = null;
            $("btnEndCall").style.display = "none";
            setStatus("");
        }

        // ===== RTCPeerConnection factory =====
        function createPeerConnection(toId) {
            const pc = new RTCPeerConnection(config);

            pc.onicecandidate = e => {
                if (e.candidate) {
                    connection.invoke("SendIceCandidate", toId, JSON.stringify(e.candidate));
                }
            };

            pc.ontrack = e => {
                if (!remoteStream) remoteStream = new MediaStream();
                remoteStream = e.streams[0] || remoteStream;
                $("remoteVideo").srcObject = remoteStream;
            };

            pc.oniceconnectionstatechange = () => {
                setStatus(`ICE: ${pc.iceConnectionState}`);
                // Khi thất bại, đóng kết nối gọn gàng
                if (["failed", "closed"].includes(pc.iceConnectionState)) {
                    $("btnEndCall").style.display = "none";
                }
            };

            pc.onconnectionstatechange = () => {
                setStatus(`${pc.connectionState.toUpperCase()}`);
                if (["disconnected", "failed", "closed"].includes(pc.connectionState)) {
                    // Không cleanup quá sớm vì đôi khi chỉ là tạm thời
                }
            };

            return pc;
        }

        // ===== SignalR wiring =====
        async function init() {
            connection = new signalR.HubConnectionBuilder()
                .withUrl("/videocallhub")
                .withAutomaticReconnect()
                .build();

            connection.on("ReceiveYourId", id => { myId = id; });

            connection.on("ReceiveUserList", renderUsers);
            connection.on("UpdateUserList", renderUsers);

            connection.on("UserConnected", user => {
                if (user.callId === myId) return;
                const li = document.createElement("li");
                li.innerText = user.fullname;
                li.id = user.callId;
                li.style.cursor = "pointer";
                if (user.status === false) { li.style.opacity = "0.5"; li.style.pointerEvents = "none"; }
                else { li.onclick = () => startCall(user.callId); }
                $("userList").appendChild(li);
            });

            connection.on("UserDisconnected", callId => {
                [...$("userList").children].forEach(li => { if (li.id === callId) li.remove(); });
            });

            // ==== Incoming OFFER ====
            connection.on("ReceiveOffer", async (fromUser, offer) => {
                openModal(`Cuộc gọi từ ${fromUser.fullname}`);

                $("acceptCallBtn").onclick = async () => {
                    try {
                        await ensureLocalMedia();
                        peerConnection = createPeerConnection(fromUser.callId);
                        attachLocalTracks(peerConnection);

                        await peerConnection.setRemoteDescription(new RTCSessionDescription(JSON.parse(offer)));
                        // Thêm những ICE candidate đã nhận trước khi setRemoteDescription
                        for (const c of pendingCandidates) {
                            try { await peerConnection.addIceCandidate(c); } catch { }
                        }
                        pendingCandidates = [];

                        const answer = await peerConnection.createAnswer();
                        await peerConnection.setLocalDescription(answer);
                        await connection.invoke("SendAnswer", fromUser.callId, JSON.stringify(answer));

                        $("btnEndCall").style.display = "inline-flex";
                        closeModal();
                    } catch (err) {
                        alert("Không thể nhận cuộc gọi: " + err.message);
                    }
                };

                $("rejectCallBtn").onclick = () => {
                    connection.invoke("CancelCall", fromUser.callId);
                    closeModal();
                };
            });

            // ==== Incoming ANSWER ====
            connection.on("ReceiveAnswer", async (fromId, answer) => {
                if (!peerConnection) return;
                await peerConnection.setRemoteDescription(new RTCSessionDescription(JSON.parse(answer)));
                // Đổ các pending ICE (nếu có)
                for (const c of pendingCandidates) {
                    try { await peerConnection.addIceCandidate(c); } catch { }
                }
                pendingCandidates = [];
            });

            // ==== Incoming ICE Candidate ====
            connection.on("ReceiveIceCandidate", async (fromId, candidate) => {
                if (!candidate) return;
                const ice = new RTCIceCandidate(JSON.parse(candidate));
                if (peerConnection && peerConnection.remoteDescription) {
                    try { await peerConnection.addIceCandidate(ice); } catch (err) {
                        console.warn("Add ICE failed", err);
                    }
                } else {
                    // Chưa setRemoteDescription: giữ lại tạm
                    pendingCandidates.push(ice);
                }
            });

            connection.on("RedirectToLogin", () => { window.location.href = "home/login"; });

            await connection.start();
            wireToolbar();
        }

        function renderUsers(users) {
            const list = $("userList");
            list.innerHTML = '';
            users.forEach(user => {
                if (user.callId === myId) return;
                const li = document.createElement("li");
                li.innerText = user.fullname;
                li.id = user.callId;
                li.style.cursor = "pointer";
                if (user.status === false) { li.style.opacity = "0.5"; li.style.pointerEvents = "none"; }
                else { li.onclick = () => startCall(user.callId); }
                list.appendChild(li);
            });
        }

        async function startCall(toId) {
            try {
                await ensureLocalMedia();
                peerConnection = createPeerConnection(toId);
                attachLocalTracks(peerConnection);

                const offer = await peerConnection.createOffer({ offerToReceiveAudio: true, offerToReceiveVideo: true });
                await peerConnection.setLocalDescription(offer);
                await connection.invoke("SendOffer", toId, JSON.stringify(offer));

                $("btnEndCall").style.display = "inline-flex";
            } catch (err) {
                alert("Không thể bắt đầu cuộc gọi: " + err.message);
            }
        }

        function wireToolbar() {
            $("btnEndCall").onclick = async () => {
                try {
                    if (connection && myId) {
                        // Thông báo hub (nếu bạn có method EndCall ở server)
                        try { await connection.invoke("EndCall", '@Model.Id'); } catch { }
                    }
                } finally { cleanup(); }
            };

            $("btnToggleMic").onclick = () => {
                micEnabled = !micEnabled;
                if (localStream) localStream.getAudioTracks().forEach(t => t.enabled = micEnabled);
                $("btnToggleMic").textContent = micEnabled ? "Tắt mic" : "Bật mic";
            };

            $("btnToggleCam").onclick = () => {
                camEnabled = !camEnabled;
                if (localStream) localStream.getVideoTracks().forEach(t => t.enabled = camEnabled);
                $("btnToggleCam").textContent = camEnabled ? "Tắt camera" : "Bật camera";
            };
        }

        window.addEventListener('beforeunload', () => {
            try { if (connection) connection.stop(); } catch { }
            cleanup();
        });

        init();
    </script>
</body>
</html>
